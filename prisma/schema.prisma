// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum PetSize {
  MINI
  P
  M
  G
  XG
}

enum PetEnergyLevel {
  BAIXA
  MEDIA
  ALTA
}

enum PetEnvironment {
  PEQUENO
  MEDIO
  AMPLO
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  phone      String?
  role       Role        @default(MEMBER)
  created_at DateTime    @default(now())
  OrgsUsers  OrgsUsers[]

  @@map("users")
}

model Org {
  id         String   @id @default(uuid())
  name       String
  owner      String
  email      String   @unique
  password   String
  phone      String
  created_at DateTime @default(now())

  orgsAddress OrgsAddress[]
  OrgsUsers   OrgsUsers[]

  @@map("orgs")
}

model Pet {
  id           String         @id @default(uuid())
  name         String
  age          String
  size         PetSize
  energy_level PetEnergyLevel
  environment  PetEnvironment
  about        String?
  image        String?
  created_at   DateTime       @default(now())

  petsRequirements PetsRequirements[]

  @@map("pets")
}

model Requirement {
  id          String @id @default(uuid())
  requirement String

  PetsRequirements PetsRequirements[]

  @@map("requirements")
}

model Address {
  id          String  @id @default(uuid())
  rua         String
  numero      String
  bairro      String
  complemento String?
  CEP         String  @unique
  cidade      String
  estado      String

  orgsAddress OrgsAddress[]

  @@map("address")
}

model PetsRequirements {
  id             String @id @default(uuid())
  pet_id         String
  requirement_id String

  pet         Pet         @relation(fields: [pet_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  requirement Requirement @relation(fields: [requirement_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([pet_id])
  @@map("pets_requirements")
}

model OrgsAddress {
  id         String @id @default(uuid())
  org_id     String
  address_id String

  org     Org     @relation(fields: [org_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  address Address @relation(fields: [address_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([org_id])
  @@map("orgs_address")
}

model OrgsUsers {
  id      String @id @default(uuid())
  org_id  String
  user_id String

  org  Org  @relation(fields: [org_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([org_id, user_id])
  @@map("orgs_users")
}
